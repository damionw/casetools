#! /usr/bin/env bash

first_name="${BASH_SOURCE[0]}"
actual_name="$(readlink -f "${first_name}")"
local_path="$(dirname "${actual_name}")"

. "${local_path}/logging"

virtualenv::python() {
    # Prefer Python3 wherever possible, but only from within a virtualenv
    PATH="${VIRTUAL_ENV}/usr/local/bin:${VIRTUAL_ENV}/bin:${VIRTUAL_ENV}/usr/bin" /usr/bin/which python3 ||
    /usr/bin/which python
}

virtualenv::path() {
    "$(virtualenv::python)" -c 'import sys; print(sys.prefix if (hasattr(sys, "real_prefix") or (hasattr(sys, "base_prefix") and sys.base_prefix != sys.prefix)) else "")'
}

virtualenv::create() {
    local _env="${1:?Provide a virtualenv path}"
    
    if [ -d "${_env}" ]
    then
        logging::warning "Using existing virtual environment in '${_env}'"
    elif "$(virtualenv::python)" -m venv "${_env}" 2>/dev/null
    then
        logging::warning "Created virtual environment in '${_env}'"
    elif virtualenv "${_env}" --system-site-packages 2>/dev/null
    then
        logging::warning "Created virtual environment in '${_env}'"
    else
        logging::fatal "Cannot create virtualenv in '${_env}'"
    fi
}
