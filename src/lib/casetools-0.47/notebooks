#! /usr/bin/env bash

first_name="${BASH_SOURCE[0]}"
actual_name="$(readlink -f "${first_name}")"
local_path="$(dirname "${actual_name}")"

#===================================================================================
#              Handle installing/removing projects from Jupyterlab
#===================================================================================
cases::notebooks::install_project_kernel() {
    local _installer_filename
    local _project
    local _label

    if ! _project="${1:?Need a project name}"
    then
        logging::error "No project provided"
        return 255
    elif ! _label="$(cases::notebooks::get_project_kernel_name "${_project}")"
    then
        logging::error "Can't get label for '${_project}'"
        return 255
    elif ! _installer_filename="$(mktemp)"
    then
        logging::error "Failed creating temporary scriptfile"
        return 255
    fi

    sed -e 's/^        //g' > "${_installer_filename}" <<< "
        pip install jupyter &&
        python -m ipykernel install --user --name '${_label}' --display-name '${_label}' || {
            echo 'Failed installing kernel ${_label}' >&2
            _status=255
        }
    "

    chmod 755 "${_installer_filename}"
    casetool --case="${_project}" --exec="${_installer_filename}"
    local _status="$?"
    rm "${_installer_filename}"
    return ${_status}
}

cases::notebooks::get_project_kernel_name() {
    local _where

    if ! _where="$(cases::project_to_folder "${1}")"
    then
        logging::error "No project provided"
        return 255
    fi

    basename "${_where}" |
    sed -e 's/[\%][0-9][0-9]/_/g' |
    tr "[A-Z]" "[a-z]"
}

cases::notebooks::get_kernels_folder() {
    echo "${HOME}/.local/share/jupyter/kernels"
}

cases::notebooks::remove_project_kernel() {
    local _kernels_folder="$(cases::notebooks::get_kernels_folder)"
    local _project
    local _label

    if ! _project="${1:?Need a project name}"
    then
        logging::error "No project provided"
        return 255
    elif ! _label="$(cases::notebooks::get_project_kernel_name "${_project}" 2>/dev/null)"
    then
        logging::error "Can't get label for '${_project}'"
        return 255
    else
        ipython kernelspec remove "${_label}"
    fi
}

cases::notebooks::get_installed_projects() {
    local _kernels_folder="$(cases::notebooks::get_kernels_folder)"
    local _project
    local _label

    cases::list all | while read _project
    do
        if ! _label="$(cases::notebooks::get_project_kernel_name "${_project}")"
        then
            :
        elif [ ! -d "${_kernels_folder}/${_label}" ]
        then
            :
        else
            echo "${_project} (${_label})"
        fi
    done
}
