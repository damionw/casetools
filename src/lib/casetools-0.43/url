#! /usr/bin/env bash

first_name="${BASH_SOURCE[0]}"
actual_name="$(readlink -f "${first_name}")"
local_path="$(dirname "${actual_name}")"

# Gleaned from https://stackoverflow.com/questions/296536/how-to-urlencode-data-for-curl-command
url::encode() {
  local string="${1:-$(cat)}"
  local strlen=${#string}
  local encoded=""
  local pos c o

  for (( pos=0 ; pos<strlen ; pos++ )); do
     c=${string:$pos:1}
     case "$c" in
        [-_.~a-zA-Z0-9] ) o="${c}" ;;
        * )               printf -v o '%%%02x' "'$c"
     esac
     encoded+="${o}"
  done

  echo "${encoded}"    # You can either set a return variable (FASTER) 
}

# Returns a string in which the sequences with percent (%) signs followed by
# two hex digits have been replaced with literal characters.
url::decode() {

  # This is perhaps a risky gambit, but since all escape characters must be
  # encoded, we can replace %NN with \xNN and pass the lot to printf -b, which
  # will decode hex for us

  local _content="${1:-$(cat)}"
  printf -v REPLY '%b' "${_content//%/\\x}" # You can either set a return variable (FASTER)

  echo "${REPLY}"  #+or echo the result (EASIER)... or both... :p
}
