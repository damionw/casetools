#!/usr/bin/env bash
#===================================================================================
#                          Import tools library
#===================================================================================
. "$(casetool --lib)"

#===================================================================================
#                               Defaults
#===================================================================================
export CASETOOL_DESKTOP_FOLDER="${CASETOOL_DESKTOP_FOLDER:-"${HOME}/Projects/.desktops"}"

#===================================================================================
#                              Logging Options
#===================================================================================
logging::set_severity info

#===================================================================================
#                           Command line option handlers
#===================================================================================
set_logging() {
    logging::set_severity "$(echo "${1}" | sed -e 's/^[\-]*//g')"
}

handle_desktop_folder() {
    if [ -n "${1}" ]
    then
        export CASETOOL_DESKTOP_FOLDER="${1}"
    else
        echo "${CASETOOL_DESKTOP_FOLDER}"
    fi
}

show_library_path() {
    casetool --lib
}

show_library_version() {
    casetool --version
}

update_desktop_folder() {
    local _folder="$(handle_desktop_folder)"

    if ! mkdir -p "${_folder}"
    then
        logging::error "Cannot prepare folder '${_folder}'"
        return $?
    fi

    logging::warning "Updating in '${_folder}'"

    local _project_name

    find "${_folder}" -type f -exec grep -q '\[Desktop Entry' {} \; -exec rm {} \;
 
    casetool --list | while read _project_name
    do
        create_project_desktop_entry "${_project_name}" > "${_folder}/${_project_name}"
        chmod u+rx "${_folder}/${_project_name}"
    done
}

get_graphical_console() {
    local _name

    for _name in konsole gnome-terminal xterm
    do
        if which "${_name}"
        then
            return 0
        fi
    done
    
    logging::error "No graphical console available"
    return 99
}

create_project_desktop_entry() {
    local _project_name="${1}"
    local _console=

    if [ -z "${_project_name}" ]
    then
        logging::error "No project name provided"
        return 212
    elif ! _console="$(get_graphical_console)"
    then
        return $?
    fi

    sed -e 's/^        //g' <<< "
        #!/usr/bin/env xdg-open
        [Desktop Entry]
        Name=${_project_name}
        GenericName=${_project_name}
        Icon=$(cases::folder::icons)/project.png
        Type=Application
        Exec=casetool --case='${_project_name}' --browse
        Actions=Console;

        [Desktop Action Console]
        Name=Console
        Exec=${_console} -p colors=Casetool -e casetool --case='${_project_name}' --console
        
    "
}


#===================================================================================
#                           Process command line options
#===================================================================================
optionslib::parse::description "Maintain Project Desktop Suite"

optionslib::parse::config "
    long_options=--help short_options=-h action=show_help description='Display instructions'
    long_options=--debug action=command name=set_logging description='Expose debug level logging'
    long_options=--info action=command name=set_logging  description='Expose normal level logging'
    long_options=--warning action=command name=set_logging  description='Expose error level logging'
    long_options=--error action=command name=set_logging  description='Expose error level logging'
    long_options=--fatal action=command name=set_logging  description='Expose fatal error level logging'
    long_options=--lib action=command name=show_library_path description='Provide the library module import file'
    long_options=--folder:: action=command name=handle_desktop_folder description='Set/Show desktop folder path'
    long_options=--version short_options=-v action=command name=show_library_version description='Produce the library version string'
    long_options=--refresh action=command name=update_desktop_folder description='Update desktop folder'
"

if ! optionslib::parse::parse_arguments "$@"
then
    exit 255
fi
