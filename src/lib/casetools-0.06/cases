#! /usr/bin/env bash

first_name="${BASH_SOURCE[0]}"
actual_name="$(readlink -f "${first_name}")"
local_path="$(dirname "${actual_name}")"

cases::module() {
    local _folder="$(cases::selected)"
    local _url="${1}"

    if modules::install::git "${_url}" "${CASETOOLS_CASE}" || modules::install::git "${_url}" master
    then
        :
    else
        logging::fatal "Cannot install required module '${_url}'"
    fi

    # Update requirements file
    cases::requirements "$((echo ${_url}; cases::requirements) | sort -u)"
}

cases::list() {
    local _folder="${CASETOOLS_BASE}"
    local _case

    if [ ! -d "${_folder}" ]
    then
        logging::fatal "No Cases home domain has been selected"
    else
        find "${_folder}" -mindepth 1 -maxdepth 1 -type d -printf "%f\n" |
        while read _case
        do
            echo "${_case}" | url::decode
        done |
        sort
    fi
}

cases::case() {
    local _case="${CASETOOLS_CASE}"

    if [ -z "${CASETOOLS_CASE}" ]
    then
        logging::fatal "No individual case has been selected"
    else
        echo "${_case}" | url::decode
    fi
}

cases::selected() {
    local _folder="${CASETOOLS_BASE}/${CASETOOLS_CASE}"

    if [ -z "${CASETOOLS_BASE}" ]
    then
        logging::fatal "No Cases home domain has been selected"
    elif [ -z "${CASETOOLS_CASE}" ]
    then
        logging::fatal "No individual case has been selected"
    elif [ ! -d "${_folder}" ]
    then
        logging::error "Case folder '${_folder}' is missing"
        return 255
    else
        echo "${_folder}"
    fi
}

cases::requirements() {
    local _case_folder="$(cases::selected)"

    if [ -z "${1}" ]
    then
        cat "${_case_folder}/REQUIREMENTS" 2>/dev/null || true
    else
        logging::warning "Writing new requirements into '${_case_folder}'"
        echo "$@" > "${_case_folder}/REQUIREMENTS"
    fi    
}

cases::description() {
    local _case_folder="$(cases::selected)"

    if [ -z "${1}" ]
    then
        cat "${_case_folder}/README"
    else
        logging::warning "Writing new README into '${_case_folder}'"
        echo "$@" > "${_case_folder}/README"
    fi
}

cases::date() {
    local _case_folder="$(cases::selected)"
    cat "${_case_folder}/CREATED"
}

cases::create() {
    format_desktop_item() {
        local _label="${1:?Provide a Label}"
        local _command="${2:?Provide a command}"
        local _icon="${3:-/usr/share/icons/hicolor/32x32/apps/kde-windows.png}"

        sed -e 's/^            //g' <<'        EOF' | m4 --prefix-builtins -DLABEL="${_label}" -DCOMMAND_LINE="${_command}" -DICON="${_icon}"
            [Desktop Entry]
            Comment[en_US]=LABEL
            Comment=LABEL
            Exec=COMMAND_LINE
            GenericName[en_US]=LABEL
            GenericName=LABEL
            Icon=ICON
            MimeType=
            Name[en_US]=LABEL
            Name=LABEL
            Path=
            StartupNotify=true
            Terminal=false
            TerminalOptions=
            Type=Application
            X-DBUS-ServiceName=
            X-DBUS-StartupType=
            X-KDE-SubstituteUID=false
            X-KDE-Username=
            X-Ubuntu-Gettext-Domain=desktop_kdebase
        EOF
    }

    make_python_console_script() {
        sed -e 's/^            //g' <<'        EOF'
            #! /usr/bin/env bash

            . "$(bashlib --lib)"

            get_python_script() {
                prepare_script() {
                    local _indent="$(echo | awk '{for (i=count; i > 0; --i){printf(" ");}}' count=${1:-0})"

                    m4  --prefix-builtins |
                    sed -e 's/^'"${_indent}"'//g'
                }

                prepare_script 8 <<'    EOF'  
                    import logging

                    from traceback import format_exc

                    logging.basicConfig(level=logging.INFO)

                    LOG = logging.getLogger(__name__)

                    #--------------------------------- CUT HERE -------------------------------------
                    #--------------------------------- CUT HERE -------------------------------------

                    __import__("code").interact(local=dict(globals().items() + locals().items()))
                    LOG.info("Finished")
                EOF
            }

            exec python <(get_python_script) "$@"
        EOF
    }

    create_skeleton_folder() {
        local _path="${1:?Provide a path}"
        local _name="${2:-$(basename "${_path}")}"

        mkdir -p "${_path}" &&
        mkdir -p "${_path}/Notes" &&
        mkdir -p "${_path}/Checkouts" &&
        mkdir -p "${_path}/Desktop" &&
        mkdir -p "${_path}/Documentation" &&
        mkdir -p "${_path}/Trash" &&
        mkdir -p "${_path}/Tools" &&
        mkdir -p "${_path}/Data"

        echo "No description for this case yet" > "${_path}/README"
        date '+%Y-%m-%d' > ${_path}/CREATED

        local _desktop="${_path}/Desktop"
        local _tools="${_path}/Tools"

        #------------------------------------
        # Configure freedesktop files
        #------------------------------------
        {
            echo '#! /usr/bin/env bash'
            echo 'set +o posix # Turn off Posix mode set by environment launcher'
            echo '. $(bashlib --lib)'
            echo 'export PATH="$(readlink -f Tools):$PATH"'

            sed -e 's/^                //g' <<< '
                cd() {
                    if [ -z "$1" ]
                    then
                        where="${CASETOOLS_HOME:-${HOME}}"
                    else
                        where="$1"
                    fi

                    command cd "${where}"
                }
            '
        } >> "${_path}/.profile"

        {
            echo "[Desktop Entry]"
            echo "Icon=/usr/share/icons/hicolor/48x48/apps/ksplash.png"
        } > "${_path}/.directory"

        {
            echo "[Desktop Entry]"
            echo "Icon=desktop"
        } > "${_desktop}/.directory"

        format_desktop_item "${_name}" "casetool --case='${_name}' --browse" >"${_desktop}/Browse"
        format_desktop_item "${_name}" "konsole -p colors=Casetool -e casetool --case='${_name}' --console" >"${_desktop}/Console"
        format_desktop_item "${_name}" "caseclone --case='${_name}' --url='%U'" >"${_desktop}/Clone"
        format_desktop_item "${_name}" "casenote --case='${_name}'" >"${_desktop}/Add a Note"

        if make_python_console_script > "${_tools}/python_console"
        then
            format_desktop_item "${_name}" "konsole -p colors=Casetool --noclose -e casetool --case='${_name}' --exec=python_console" > "${_desktop}/Python Console"
        fi

        #------------------------------------
        #              Permissions
        #------------------------------------
        chmod -R u+rx "${_desktop}/." "${_tools}/."
    }

    local _path="${1:?Provide a case path}"
    local _name="${2:-$(basename "${_path}")}"

    if [ -d "${_path}" ] || create_skeleton_folder "${_path}" "${_name}"
    then
        :
    else
        logging::fatal "Cannot access or create case folder '${_path}'"
    fi

    if [ -d "${_path}/Environment" ] || virtualenv::create "${_path}/Environment"
    then
        :
    else
        logging::fatal "Cannot prepare virtualenv in '${_path}'"
    fi
}

cases::running_in_gui() {
    xset -q >/dev/null
}
