# See: https://stackoverflow.com/questions/3471827/how-do-i-list-all-remote-branches-in-git-1-7

first_name="${BASH_SOURCE[0]}"
actual_name="$(readlink -f "${first_name}")"
local_path="$(dirname "${actual_name}")"

. "${lib_path}/cases"

cases::clone() {
    is_git() {
        echo "$1" | egrep -q '(git[\@\:\.]|github)'
    }

    local _url="${1:?Must provide a repo url}"
    local _root_folder="$(cases::selected)/Checkouts"
    local _use_git=false
    local _hive_type=hg
    local _checkout_name
    local _branch=master

    if is_git "${_url}"
    then
        _use_git=true _hive_type=git
    fi

    if [ ! -d "${_root_folder}" ]
    then
        logging::fatal "Checkouts folder '${_root_folder}' is unavailable"
    fi

    if "${_use_git}"
    then
        local _keys=(
            $(echo "${_url}" |
            sed -e 's/^.*[\/][\/]//g' |
            awk -F/ '{for (i=1; i <= NF; ++i) {print $i;}}')
        )

        local _servername="${_keys[0]}"
        local _username="${_keys[1]}"
        local _reponame="${_keys[2]}"

        if [ ${#_keys[@]} -gt 3 ]
        then
            _branch="${_keys[$((${#_keys[@]} - 1))]}"
        fi

        if (echo "${_url}" | grep -q 'github[\.]com') # Special case for github
        then
            _checkout_name="${_reponame}-$(basename "${_url}")"
            _url="https://${_servername}/${_username}/${_reponame}.git"
            # _branch="master"
        elif (echo "${_branch}" | grep -q '[\.]git$')
        then
            _checkout_name="$(basename "${_url}" | sed -e 's/[\.]git$//g')"
        else
            _checkout_name="${_reponame}.${_branch}"
            _url="git@${_servername}:${_username}/${_reponame}.git"
        fi

        if ! (git ls-remote --heads "${_url}" | grep -q '\/'"${_branch}"'$')
        then
            # The expected branch isn't represented, pull all branches
            _checkout_name="${_reponame}.any"
            _branch=
        fi
    else
        _checkout_name="$(basename "${_url}")"
    fi

    local _checkout_folder="${_root_folder}/${_checkout_name}"

    if [ -e "$_checkout_folder" ]
    then
        logging::fatal "Folder '${_checkout_folder}' already exists"
    elif "${_use_git}"
    then
        logging::info "Using url '${_url}' and branch '${_branch}'"
        local _msg="$(LD_LIBRARY_PATH= git clone --recurse-submodules ${_branch:+-b} ${_branch} "${_url}" "${_checkout_folder}" 2>&1)" || logging::fatal "${_msg}"
        local _upstream="$(echo "${_url}" | sed -e 's/[\:]'"${USER}"'[\/]/:risk\//g')"
        (command cd "${_checkout_folder}" && test -f .gitmodules && git submodule update --init --recursive)
        (command cd "${_checkout_folder}" && LD_LIBRARY_PATH= git remote add upstream "${_upstream}")
        (command cd "${_checkout_folder}" && LD_LIBRARY_PATH= git config pull.rebase false)
    else
        msg="$(hg clone --uncompressed "${_url}" "${_checkout_folder}" 2>&1)" || logging::fatal "$msg"
    fi
}
