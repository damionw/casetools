#! /usr/bin/env bash

first_name="${BASH_SOURCE[0]}"
actual_name="$(readlink -f "${first_name}")"
local_path="$(dirname "${actual_name}")"
library_import_file="$(readlink -f "${local_path}/../lib/casetools")"

#===================================================================================
#                          Import tools library
#===================================================================================
. "${library_import_file}"

if [ $(bc <<< "$(bashlib --version) >= 0.22") = 1 ] && . "$(bashlib --lib)"
then
    :
else
    logging::fatal "bashlib module requirement not satistified"
fi

#===================================================================================
#                              Logging Options
#===================================================================================
logging::set_severity info

#===================================================================================
#                                Execute a subcommand if required
#===================================================================================
if [ -z "$1" ]
then
    :
elif (echo "$1" | grep -q '^[\-]')
then
    :
else
    subcommand="$(casetools::subcommands::path)/${1}"
    shift

    if [ -x "${subcommand}" ]
    then
        PATH="$(dirname "$(readlink -f "${BASH_SOURCE[0]}")"):${PATH}" exec "${subcommand}" "$@"
    else
        logging::fatal "No such command '${subcommand}'"
    fi
fi

#===================================================================================
#                          Verify Casetools home folder
#===================================================================================
if [ -d "${CASETOOLS_BASE}" ]
then
    :
elif mkdir -p "${CASETOOLS_BASE}"
then
    logging::warning "Created case folder in '${CASETOOLS_BASE}'"
else
    logging::fatal "Can't use casetool environments in folder '${CASETOOLS_BASE}'"
fi

#===================================================================================
#                           Initialize Option Defaults
#===================================================================================
excluded_folders=()
create_project=false

#===================================================================================
#                           Command line option handlers
#===================================================================================
select_local() {
    local _root_folder _current_folder

    if _root_folder="$(casetools::cases::path)"
    then
        :
    else
        exit $?
    fi

    if _current_folder="$(readlink -f "$(pwd)")"
    then
        :
    else
        exit $?
    fi

    local _length="$(echo -n "${_root_folder}" | wc -c)"
    local _head="$(echo -n "${_current_folder}" | cut --characters=1-${_length})"

    if [ "${_head}" != "${_root_folder}" ]
    then
        logging::error "current directory '${_current_folder}' is not in a project folder"
        exit $?
    fi

    local _case="$(
        echo "${_current_folder}" |
        cut --characters=$((_length + 2))- |
        awk -F/ '{print $1;}' |
        url::decode
    )"

    if select_project "${_case}" "${_current_folder}"
    then
        :
    else
        exit $?
    fi
}

select_project() {
    if [ -n "${1}" ]
    then
        _name="${1}"
        _switch_to_folder="${2}"
        _case="$(echo "${_name}" | url::encode)"
        _case_folder="${CASETOOLS_BASE}/${_case}"
        _just_created=false

        if [ -d "${_case_folder}" ]
        then
            :
        elif ${create_project}
        then
            if cases::create "${_case_folder}" "${_name}"
            then
                _just_created=true
            else
                logging::error "Cannot create case in '${_case_folder}'"
                return $?
            fi
        else
            logging::fatal "Will not create a new case '${_case}' in '${_case_folder}'"
        fi

        if . "${_case_folder}/Environment/bin/activate"
        then
            logging::warning "Selected virtual environment in '$(virtualenv::path)'"
            export CASETOOLS_CASE="${_case}" CASETOOLS_HOME="${CASETOOLS_BASE}/${_case}"
            export LD_LIBRARY_PATH="$(virtualenv::path)/lib:${LD_LIBRARY_PATH}"

            if [ -z "${_switch_to_folder}" ]
            then
                _switch_to_folder="${_case_folder}"
            fi

            if [ ! -d "${_switch_to_folder}" ]
            then
                :
            elif ! cd "${_switch_to_folder}"
            then
                logging::warning "Can't switch to chosen folder '${_switch_to_folder}'"
            else
                logging::warning "Switching to chosen folder '${_switch_to_folder}'"
            fi
        else
            logging::fatal "Cannot select virtual environment in '${_case_folder}'"
        fi

        if ${_just_created}
        then
            # cases::module "https://github.com/damionw/webserve.git" &&
            cases::description "${_name}" ||
            logging::fatal "Cannot install required modules"
        fi
    elif [ -n "${CASETOOLS_CASE}" ]
    then
        echo "Selected case '$(echo "${CASETOOLS_CASE}" | url::decode)' in folder '${CASETOOLS_BASE}'"
    else
        echo "No case has been selected"
    fi
}

execute_project_console() {
    local _folder _rc_options

    if _folder="$(cases::selected)" _case="$(cases::case)"
    then
        logging::warning "Entering environment $(virtualenv::path)"
        konsoleprofile colors=Casetool 2>/dev/null || true

        (
            _rc_options="$(test -f "${_folder}/.profile" && echo --posix || echo --norc)" &&
            ENV="${_folder}/.profile" HISTFILE="${_folder}/.bash_history" PS1="[${_case}]> " exec bash --noprofile ${_rc_options} -i <&2 >&2
        )

        logging::warning "Exiting environment $(virtualenv::path)"
    fi

    exit 0
}

execute_project_command() {
    local _command _folder _status=0

    _command="${1}"

    if _folder="$(cases::selected)" _case="$(cases::case)"
    then
        logging::warning "Entering environment $(virtualenv::path)"

        (
            cd "${_folder}" &&
            ENV="${_folder}/.profile" exec bash --noprofile -c ". .profile; ${_command}" && _status=$?
        )
        _status=$?

        logging::warning "Exiting environment $(virtualenv::path)"
    else
        logging::fatal "No environment selected"
        _status=$?
    fi

    exit ${_status}
}

enable_project_creation() {
    create_project=true
}

set_logging() {
    logging::set_severity "$(echo "${1}" | sed -e 's/^[\-]*//g')"
}

show_library_path() {
    echo "${library_import_file}"
}

detect_project() {
    _name="${1}"
    _case="$(echo "${_name}" | url::encode)"
    _case_folder="${CASETOOLS_BASE}/${_case}"

    if [ -n "${_name}" -a -d "${_case_folder}" -a -d "${_case_folder}/Environment" ]
    then
        logging::debug "Case ${_name} exists"
        exit 0
    fi

    logging::warning "Case ${_name} doesn't exist"
    exit 255
}

list_project_tags() {
    casetool::list_tags "${1}"
    exit 0
}

add_excluded_project() {
    excluded_folders[${#excluded_folders[@]}]="${1}"
}

pack_project() {
    local _archive_file _passphrase

    if _archive_file="${1:?Please provide an archive file to create}" && read -p "Enter passphrase: " -s _passphrase
    then
        echo
    else
        exit 255
    fi

    if cases::packaging::key "${_passphrase}" && cases::packaging::pack "${excluded_folders[@]}" > "${_archive_file}"
    then
        logging::info "Wrote archive of '$(cases::case)' to '${_archive_file}'"
    fi

    exit $?
}

unpack_project() {
    if _archive_file="${1:?Please provide an archive file to restore}" && read -p "Enter passphrase: " -s _passphrase
    then
        echo
    else
        exit 255
    fi

    shift 2

    cases::packaging::key "${_passphrase}" && cases::packaging::unpack < "${_archive_file}"
    exit $?
}

select_home_folder() {
    if [ -z "${1}" ]
    then
        echo ${CASETOOLS_BASE}
        exit 0
    elif [ ! -d "${1}" ]
    then
        logging::error "Project group folder '${2}' doesn't exist"
        exit 255
    else
        export CASETOOLS_BASE="${2}"
    fi
}

select_modules() {
    if [ -z "${1}" ]
    then
        cases::requirements
    else
        cases::module "${1}"
    fi
}

refresh_project_dependencies() {
    _requirements="$(cases::requirements)"

    echo "${_requirements}" | while read _url
    do
        cases::module "${_url}"
    done
}

get_project_folder() {
    local _folder

    if _folder="$(cases::selected)${1:+/}${1}"
    then
        :
    else
        return $?
    fi

    if [ ! -e "${_folder}" ]
    then
        logging::error "${_folder} doesn't exist"
        return 253
    else
        echo "${_folder}"
    fi
}

open_project_browser() {
    local _folder
    _folder="$(cases::selected)" && xdg-open "${_folder}"
    exit $?
}

#===================================================================================
#                           Process command line options
#===================================================================================
optionslib::parse::description "Manage Project Cases"

optionslib::parse::config "
    long_options=--help short_options=-h action=show_help description='Display instructions'
    long_options=--debug action=command name=set_logging description='Expose debug level logging'
    long_options=--info action=command name=set_logging  description='Expose normal level logging'
    long_options=--warning action=command name=set_logging  description='Expose error level logging'
    long_options=--error action=command name=set_logging  description='Expose error level logging'
    long_options=--fatal action=command name=set_logging  description='Expose fatal error level logging'
    long_options=--lib action=command name=show_library_path description='Provide the library module import file'
    long_options=--version short_options=-v action=command name=casetools::version description='Produce the library version string'
    long_options=--commands action=command name=casetools::subcommands description='List available subcommands'
    long_options=--case:: action=command name=select_project description='Select a project or provide the currently selected project'
    long_options=--here action=command name=select_local description='Select the project in the current directory tree'
    long_options=--shell,--console action=command name=execute_project_console description='Run a console shell in the selected project virtualenv'
    long_options=--browse action=command name=open_project_browser description='Open a file browser in the project home directory'
    long_options=--exec: action=command name=execute_project_command description='Run a shell command in the selected project virtualenv'
    long_options=--where:: action=command name=get_project_folder description='Display the project home directory'
    long_options=--requirements action=command name=cases::requirements description='List the project existing dependencies'
    long_options=--update action=command name=refresh_project_dependencies description='Refresh all of the project dependencies'
    long_options=--description:: action=command name=cases::description description='Provide or display the project description'
    long_options=--module::,--modules:: action=command name=select_modules description='Provide a git package dependency or list the project existing dependencies'
    long_options=--list:: action=command name=cases::list description='List the known project names (open|closed)'
    long_options=--date action=command name=cases::date description='Provide the project creation date'
    long_options=--detect: action=command name=detect_project description='Determine existence of a project'
    long_options=--home:: action=command name=select_home_folder description='Display or set the base directory where the projects are contained'
    long_options=--pack: action=command name=pack_project description='Archive the current project to a file'
    long_options=--unpack: action=command name=unpack_project description='Restore an archived project from a file'
    long_options=--create action=command name=enable_project_creation description='Create project if missing'
    long_options=--tag: action=command name=casetool::add_tag description='Add a tag'
    long_options=--untag: action=command name=casetool::remove_tag description='Remove a tag'
    long_options=--tags:: action=command name=list_project_tags description='List tags (tags=all fetches tags from all projects)'
    long_options=--exclude: action=command name=add_excluded_project description='Add folder to exclude from archiving'
"

if optionslib::parse::parse_arguments "$@"
then
    : # if ! ... resets $?
else
    exit $?
fi
